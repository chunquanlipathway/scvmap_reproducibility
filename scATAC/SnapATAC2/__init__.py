#!/usr/bin/env python
# -*- coding: UTF-8 -*-

import os.path

import pandas as pd
import snapatac2 as snap
from pandas import DataFrame
from anndata import AnnData

import sciv
from yzm_file import StaticMethod
from yzm_log import Logger


class SnapATAC2Handler:

    def __init__(self, base_path: str, sample_file: str) -> None:
        self.file_method: StaticMethod = StaticMethod("SnapATAC2Handler")
        self.log: Logger = Logger("SnapATAC2Handler")
        self.base_path = base_path
        self.label_dict = self.get_label_info
        self.label_list = list(self.label_dict.keys())
        self.label_list.sort()
        self.label_info: DataFrame = pd.read_table(sample_file)
        self.cluster = "cell_type"
        self.max_features = 500000
        # Customized on a case-by-case basis
        # self.min_tsse = 0
        # self.min_tsse = 0.25
        # self.min_tsse = 1
        self.min_tsse = 5
        self.is_exist_skip = True

    @property
    def get_label_info(self) -> dict:
        label_dict: dict = {}
        gse_dirs_dict: dict = self.file_method.entry_dirs_dict(self.base_path)
        gse_dir_names: list = gse_dirs_dict["name"]

        for gse_dir_name in gse_dir_names:
            dir_name_path: str = gse_dirs_dict[gse_dir_name]
            gse_data_path = os.path.join(dir_name_path, "data")
            # Obtain `label` information
            gse_label_dict: dict = self.file_method.entry_dirs_dict(gse_data_path)
            gse_label_list: list = gse_label_dict["name"]

            for gse_label in gse_label_list:
                label_dict.update({gse_label: gse_label_dict[gse_label]})

        return label_dict

    def get_genome(self, label: str):
        _values_ = self.label_info[self.label_info["f_label"] == label]["f_genome"].values[0]
        return snap.genome.hg38 if _values_ == "hg38" else snap.genome.hg19

    def process_cell_anno(self):
        """
        This process is to generate a standardized file for all the information in the annotated cell type file
        Listed as {"barcodes", "celltype", "UMAP1", "UMAP2"}
        This process needs to be completed manually
        """

        for label in self.label_list:
            source_file = os.path.join(self.label_dict[label], "meta", "annotation.txt")
            target_file = os.path.join(self.label_dict[label], "annotation_stdn.txt")
            anno: DataFrame = pd.read_table(source_file)
            # Manually corresponding column names are required here
            anno: DataFrame = anno[["barcodes", "Celltype", "UMAP1_X", "UMAP1_Y"]]
            anno.columns = ["barcodes", "cell_type", "UMAP1", "UMAP2"]
            anno.to_csv(target_file, sep="\t", index=False, encoding="utf-8", lineterminator="\n")
            self.file_method.move_file(source_file, os.path.join(self.label_dict[label], "annotation.txt"))

    def form_h5ad_and_fragments_file(self) -> None:

        for label in self.label_list:
            sc_atac_h5ad: str = os.path.join(self.label_dict[label], f"{label}_sc_atac.h5ad")
            fragments_file: str = os.path.join(self.label_dict[label], f"{label}_fragments.tsv")
            fragments_gz_file: str = os.path.join(self.label_dict[label], f"{label}_fragments.tsv.gz")

            if os.path.exists(sc_atac_h5ad) and os.path.exists(fragments_gz_file):
                self.log.warning(f"The {sc_atac_h5ad} file already exists and has been generated by default.")
                self.log.warning(f"The {fragments_gz_file} file already exists and has been generated by default.")
                pass
            elif os.path.exists(sc_atac_h5ad):
                self.log.warning(f"The {sc_atac_h5ad} file already exists and has been generated by default.")
                sc_atac_adata: AnnData = sciv.fl.read_sc_atac(resource=sc_atac_h5ad)
                self.log.info(f"Generate scATAC-seq data {fragments_file} file for {label}.")
                sciv.fl.to_fragments(sc_atac_adata, fragments_file, is_sort=True)
            else:
                self.log.info(f"Generate scATAC-seq data file for {label}.")
                sc_atac_path: str = os.path.join(self.label_dict[label], "meta")
                anno_file: str = os.path.join(self.label_dict[label], "annotation_stdn.txt")
                sc_atac_adata: AnnData = sciv.fl.read_sc_atac(resource=sc_atac_path, annotation_file=anno_file)
                # save h5ad
                sciv.fl.save_h5ad(sc_atac_adata, sc_atac_h5ad)
                sciv.fl.to_fragments(sc_atac_adata, fragments_file, is_sort=True)

    def fragments_gz_file(self, label: str) -> str:
        return os.path.join(self.label_dict[label], f"{label}_fragments.tsv.gz")

    def sc_atac_file(self, label: str) -> str:
        return os.path.join(self.label_dict[label], f"{label}_sc_atac_snapATAC2.h5ad")

    def cell_anno_file(self, label: str) -> DataFrame:
        data_file = os.path.join(self.label_dict[label], "annotation_stdn.txt")
        cell_anno = pd.read_table(data_file)
        new_barcodes = list(cell_anno["barcodes"].str.split("-", expand=True)[0])
        cell_anno.index = cell_anno["barcodes"].astype(str) if len(new_barcodes) != len(set(new_barcodes)) else new_barcodes
        cell_anno.rename_axis("index", inplace=True)
        cell_anno.loc[cell_anno[self.cluster].isna(), self.cluster] = "unknown"
        return cell_anno

    def form_gene_data(self):

        for label in self.label_list:
            # noinspection DuplicatedCode
            gene_file: str = os.path.join(self.label_dict[label], f"{label}_gene_expression_data.h5ad")

            if self.is_exist_skip and os.path.exists(gene_file):
                self.log.warning(f"The {gene_file} file already exists, skip this process.")
                continue

            self.log.info(f"Generate gene expression file for {label}.")
            genome_anno = self.get_genome(label)

            # Gene expression
            sciv.pp.get_gene_expression(
                fragment_file=self.fragments_gz_file(label),
                h5ad_file=self.sc_atac_file(label),
                genome_anno=genome_anno,
                need_features=self.max_features,
                min_tsse=self.min_tsse,
                gene_save_file=gene_file
            )

    def form_tf_data(self):

        for label in self.label_list:
            # noinspection DuplicatedCode
            tf_file: str = os.path.join(self.label_dict[label], f"{label}_tf_activity_data.h5ad")

            if self.is_exist_skip and os.path.exists(tf_file):
                self.log.warning(f"The {tf_file} file already exists, skip this process.")
                continue

            self.log.info(f"Generate TF data file for {label}.")
            genome_anno = self.get_genome(label)

            try:
                # TF activity
                sciv.pp.get_tf_data(
                    fragment_file=self.fragments_gz_file(label),
                    h5ad_file=self.sc_atac_file(label),
                    genome_anno=genome_anno,
                    need_features=self.max_features,
                    min_tsse=self.min_tsse,
                    cluster=self.cluster,
                    # p_value=p_value,
                    cell_anno=self.cell_anno_file(label),
                    tf_save_file=tf_file
                )
            except Exception as e:
                self.log.error(f"error while generating TF data for {label}, {e.args}")

    def form_difference_peak(self):

        for label in self.label_list:
            label: str

            # noinspection DuplicatedCode
            diff_peaks_file: str = os.path.join(self.label_dict[label], f"{label}_difference_peak.h5ad")

            if self.is_exist_skip and os.path.exists(diff_peaks_file):
                self.log.warning(f"The {diff_peaks_file} file already exists, skip this process.")
                continue

            self.log.info(f"Generate difference peak file for {label}.")
            genome_anno = self.get_genome(label)

            # Difference peaks
            sciv.pp.get_difference_peaks(
                fragment_file=self.fragments_gz_file(label),
                h5ad_file=self.sc_atac_file(label),
                genome_anno=genome_anno,
                need_features=self.max_features,
                min_tsse=self.min_tsse,
                cluster=self.cluster,
                cell_anno=self.cell_anno_file(label),
                diff_peaks_save_file=diff_peaks_file
            )

    def form_difference_gene(self):

        for label in self.label_list:
            # noinspection DuplicatedCode
            gene_file: str = os.path.join(self.label_dict[label], f"{label}_gene_expression_data.h5ad")
            diff_genes_file: str = os.path.join(self.label_dict[label], f"{label}_difference_gene.h5ad")

            if self.is_exist_skip and os.path.exists(diff_genes_file):
                self.log.warning(f"The {diff_genes_file} file already exists, skip this process.")
                continue

            gene_adata: AnnData = sciv.fl.read_h5ad(gene_file)

            # Difference genes
            sciv.pp.get_difference_genes(
                adata=gene_adata,
                cluster=self.cluster,
                cell_anno=self.cell_anno_file(label),
                diff_genes_file=diff_genes_file
            )

    def form_gene_enrichment(self):

        for label in self.label_list:
            # noinspection DuplicatedCode
            diff_genes_file: str = os.path.join(self.label_dict[label], f"{label}_difference_gene.h5ad")
            gene_enrichment_file: str = os.path.join(self.label_dict[label], f"{label}_gene_enrichment.txt")

            if self.is_exist_skip and os.path.exists(gene_enrichment_file):
                self.log.warning(f"The {gene_enrichment_file} file already exists, skip this process.")
                continue

            diff_genes_adata: AnnData = sciv.fl.read_h5ad(diff_genes_file)

            # enrichment data
            enrichment = sciv.pp.get_gene_enrichment(adata=diff_genes_adata, top_number=50)
            enrichment.to_csv(gene_enrichment_file, sep="\t", index=False, encoding="utf-8", lineterminator="\n")


if __name__ == '__main__':
    path: str = "/public/home/lcq/rgzn/yuzhengmin/keti/scATAC"
    sample_info_file: str = "/public/home/lcq/rgzn/yuzhengmin/keti/project_code/scvdb_reproducibility/scATAC/data/sample_info.txt"
    handler = SnapATAC2Handler(base_path=path, sample_file=sample_info_file)
    # handler.process_cell_anno()
    handler.form_h5ad_and_fragments_file()
    handler.form_gene_data()
    handler.form_difference_gene()
    handler.form_gene_enrichment()
    handler.form_tf_data()
    handler.form_difference_peak()
